# graph/nodes.py

import json
import re
import time
from fuzzywuzzy import fuzz
from langchain_core.messages import HumanMessage, AIMessage
from qdrant_client.http import models

# Import t·ª´ c√°c file kh√°c trong project
import config
from utils import (
    get_llm, get_embedding_model, get_qdrant_client,
    retrieve_related_chats, base_prompt, generate_prompt_context, fuzzy_match
)
from graph.state import AgentState

# ============================ NODES ============================

def extract_intent_node(state: AgentState) -> AgentState:
    """Node ƒë·∫ßu ti√™n: Ph√¢n t√≠ch c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng ƒë·ªÉ hi·ªÉu h·ªç mu·ªën g√¨."""
    # L·∫•y l·ªãch s·ª≠ chat v√† query hi·ªán t·∫°i
    # G·ªçi h√†m retrieve_related_chats ƒë·ªÉ l·∫•y c√°c h·ªôi tho·∫°i c≈© li√™n quan l√†m ng·ªØ c·∫£nh
    # T·∫°o m·ªôt prompt ph·ª©c t·∫°p y√™u c·∫ßu LLM tr·∫£ v·ªÅ m·ªôt c·∫•u tr√∫c JSON
    # G·ªçi LLM v√† ph√¢n t√≠ch k·∫øt qu·∫£ JSON
    # C·∫≠p nh·∫≠t state v·ªõi user_intent v√† question_type
    chat_history = state.get("chat_history", [])
    messages = []
    for msg in chat_history:
        if msg.startswith("Ng∆∞·ªùi d√πng:"):
            messages.append(HumanMessage(content=msg.replace("Ng∆∞·ªùi d√πng:", "").strip()))
        elif msg.startswith("H·ªá th·ªëng:"):
            messages.append(AIMessage(content=msg.replace("H·ªá th·ªëng:", "").strip()))

    query_text = state["query"].lower()
    related_chats = retrieve_related_chats(state["query"])
    related_context = "\n\n".join([
        f"üìå L·ªãch s·ª≠ tr∆∞·ªõc:\nNg∆∞·ªùi d√πng: {c['query']}\nH·ªá th·ªëng: {c['response']}"
        for c in related_chats if c.get("query") and c.get("response")
    ])

    messages.append(HumanMessage(content=f"""
    B·∫°n l√† tr·ª£ l√Ω th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠. D∆∞·ªõi ƒë√¢y l√† c√°c ƒëo·∫°n h·ªôi tho·∫°i li√™n quan tr∆∞·ªõc ƒë√≥:
    {related_context}

    H√£y ph√¢n t√≠ch m·ª•c ƒë√≠ch ng∆∞·ªùi d√πng v√† ch·ªâ TR·∫¢ V·ªÄ K·∫æT QU·∫¢ D∆Ø·ªöI D·∫†NG JSON **duy nh·∫•t**, b·∫±ng ti·∫øng Vi·ªát. ‚ùå Kh√¥ng vi·∫øt b·∫•t k·ª≥ gi·∫£i th√≠ch, m√¥ t·∫£, hay ch√∫ th√≠ch n√†o kh√°c.

    JSON b·∫Øt bu·ªôc ph·∫£i ch·ª©a ƒë·ªß c√°c tr∆∞·ªùng sau:
    - "lo·∫°i_s·∫£n_ph·∫©m": (v√≠ d·ª•: "·ªëp ƒëi·ªán tho·∫°i", "tai nghe", "chu·ªôt", ho·∫∑c null n·∫øu kh√¥ng r√µ)
    - "t√™n_s·∫£n_ph·∫©m": (t√™n c·ª• th·ªÉ, v√≠ d·ª•: "Elough Air31", "Forter V181", ho·∫∑c null n·∫øu kh√¥ng c√≥)
    - "ch·∫•t_li·ªáu": (v√≠ d·ª•: "silicon", ho·∫∑c null n·∫øu kh√¥ng r√µ)
    - "gi√°_t·ªëi_ƒëa": (v√≠ d·ª•: 500000, ho·∫∑c null n·∫øu kh√¥ng r√µ)
    - "t√≠nh_nƒÉng": (danh s√°ch t·ª´ kh√≥a, v√≠ d·ª•: ["ch·ªëng s·ªëc", "bluetooth"])
    - "lo·∫°i_c√¢u_h·ªèi": ch·ªâ ch·ªçn 1 trong: "recommendation", "comparison", "summary", "find_by_name"
    - "s·ªë_l∆∞·ª£ng_s·∫£n_ph·∫©m": (s·ªë nguy√™n, v√≠ d·ª•: 1 ho·∫∑c 3)

    **H∆∞·ªõng d·∫´n b·ªï sung**:
    - N·∫øu c√¢u h·ªèi ch·ª©a t√™n c·ª• th·ªÉ (v√≠ d·ª•: "Elough Air31", "iPhone 15") v√† c√≥ d·∫°ng "C√≥ s·∫£n ph·∫©m ... kh√¥ng?", ƒë·∫∑t t√™n ƒë√≥ v√†o "t√™n_s·∫£n_ph·∫©m" v√† ch·ªçn "lo·∫°i_c√¢u_h·ªèi" l√† "find_by_name".
    - X√°c ƒë·ªãnh "lo·∫°i_s·∫£n_ph·∫©m" d·ª±a tr√™n c√¢u h·ªèi ho·∫∑c t√™n s·∫£n ph·∫©m:
      - N·∫øu ch·ª©a "·ªëp", "case", ƒë·∫∑t "lo·∫°i_s·∫£n_ph·∫©m" l√† "·ªëp ƒëi·ªán tho·∫°i".
      - N·∫øu ch·ª©a "tai nghe", "headphone", ƒë·∫∑t "lo·∫°i_s·∫£n_ph·∫©m" l√† "tai nghe".
      - N·∫øu ch·ª©a "chu·ªôt", "mouse", ƒë·∫∑t "lo·∫°i_s·∫£n_ph·∫©m" l√† "chu·ªôt m√°y t√≠nh".
    - N·∫øu c√¢u h·ªèi ch·ª©a "so s√°nh" v√† tham chi·∫øu "s·∫£n ph·∫©m tr√™n", "c√°c s·∫£n ph·∫©m ƒë√≥", l·∫•y "lo·∫°i_s·∫£n_ph·∫©m" v√† "s·ªë_l∆∞·ª£ng_s·∫£n_ph·∫©m" t·ª´ c√¢u h·ªèi tr∆∞·ªõc ƒë√≥ trong l·ªãch s·ª≠ h·ªôi tho·∫°i. ƒê·∫∑t "t√™n_s·∫£n_ph·∫©m" l√† null v√† "lo·∫°i_c√¢u_h·ªèi" l√† "comparison".
    - "t√≠nh_nƒÉng" ch·ªâ bao g·ªìm ƒë·∫∑c ƒëi·ªÉm s·∫£n ph·∫©m (v√≠ d·ª•: "ch·ªëng s·ªëc", "bluetooth"). Kh√¥ng ƒë∆∞a th√¥ng tin nh∆∞ b·∫£o h√†nh ho·∫∑c gi√° v√†o "t√≠nh_nƒÉng".
    - N·∫øu kh√¥ng r√µ, ƒë·ªÉ c√°c tr∆∞·ªùng t∆∞∆°ng ·ª©ng l√† null.

    C√¢u h·ªèi ng∆∞·ªùi d√πng: \"{query_text}\"
    """))

    llm = get_llm()
    response = llm.invoke(messages)

    match = re.search(r"\{.*\}", response.content, re.DOTALL)
    if not match:
        raise ValueError("Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá:\n" + response.content)

    try:
        vi_intent = json.loads(match.group(0))
        prev_intent = state.get("user_intent", {})  # S·ª≠ d·ª•ng dictionary r·ªóng l√†m m·∫∑c ƒë·ªãnh
        vi_intent["lo·∫°i_s·∫£n_ph·∫©m"] = vi_intent.get("lo·∫°i_s·∫£n_ph·∫©m") or prev_intent.get("product_type", None)
        vi_intent["t√™n_s·∫£n_ph·∫©m"] = vi_intent.get("t√™n_s·∫£n_ph·∫©m") or prev_intent.get("product_name", None)
        vi_intent["ch·∫•t_li·ªáu"] = vi_intent.get("ch·∫•t_li·ªáu") or prev_intent.get("material", None)
        vi_intent["gi√°_t·ªëi_ƒëa"] = vi_intent.get("gi√°_t·ªëi_ƒëa") or prev_intent.get("price_max", None)
        vi_intent["t√≠nh_nƒÉng"] = list(set((vi_intent.get("t√≠nh_nƒÉng") or []) + (prev_intent.get("features") or [])))

        qtype = vi_intent.get("lo·∫°i_c√¢u_h·ªèi", "summary")
        if qtype not in ["recommendation", "comparison", "summary", "find_by_name"]:
            qtype = "summary"   
        prev_num_products = prev_intent.get("num_products", 1)
        vi_intent["s·ªë_l∆∞·ª£ng_s·∫£n_ph·∫©m"] = vi_intent.get("s·ªë_l∆∞·ª£ng_s·∫£n_ph·∫©m") or prev_num_products
        state["user_intent"] = {
            "product_type": vi_intent.get("lo·∫°i_s·∫£n_ph·∫©m"),
            "product_name": vi_intent.get("t√™n_s·∫£n_ph·∫©m"),
            "material": vi_intent.get("ch·∫•t_li·ªáu"),
            "price_max": vi_intent.get("gi√°_t·ªëi_ƒëa"),
            "features": vi_intent.get("t√≠nh_nƒÉng"),
            "question_type": qtype,
            "num_products": vi_intent["s·ªë_l∆∞·ª£ng_s·∫£n_ph·∫©m"]
        }
        state["question_type"] = qtype
        state["chat_history"] = chat_history + [
            f"Ng∆∞·ªùi d√πng: {state['query']}",
            f"H·ªá th·ªëng: {response.content}"
        ]
        return state
    except json.JSONDecodeError:
        raise ValueError("JSON parse error:\n" + match.group(0))



def search_node(state: AgentState) -> AgentState:
    """Node th·ª© hai: T√¨m ki·∫øm trong Qdrant d·ª±a tr√™n c√¢u h·ªèi."""
    # L·∫•y c√¢u h·ªèi t·ª´ state['query']
    # Chuy·ªÉn c√¢u h·ªèi th√†nh vector b·∫±ng model embedding
    # G·ªçi Qdrant ƒë·ªÉ t√¨m 100 s·∫£n ph·∫©m c√≥ vector g·∫ßn nh·∫•t
    # L∆∞u k·∫øt qu·∫£ v√†o state["results"]
    start = time.time()

    embedding_model = get_embedding_model()
    query_vector = embedding_model.embed_query(state['query'])
    client = get_qdrant_client()
    results = client.search(
        collection_name=config.COLLECTION_NAME,
        query_vector=query_vector,
        limit=100,
        with_payload=True
    )
    state["results"] = [r.payload for r in results]
    print(f"[‚è± search_node] took {time.time() - start:.2f}s")
    return state


def rerank_node(state: AgentState) -> AgentState:
    start = time.time()
    intent = state.get("user_intent", {}) or {}
    results = state["results"]
    product_name_query = intent.get("product_name")
    if product_name_query:
        # L·ªçc ra t·∫•t c·∫£ c√°c k·∫øt qu·∫£ c√≥ ch·ª©a t√™n s·∫£n ph·∫©m
        exact_matches = [
            r for r in results 
            if product_name_query.lower() in r.get("name_product", "").lower()
        ]
        # N·∫øu t√¨m th·∫•y k·∫øt qu·∫£ kh·ªõp ch√≠nh x√°c, ch·ªâ s·ª≠ d·ª•ng ch√∫ng
        if exact_matches:
            results = exact_matches
    # keywords = PRODUCT_KEYWORDS.get(intent.get("product_type"), DEFAULT_KEYWORDS)

    ranked = []
    for r in results:
        text = f"{r.get('name_product', '')} {r.get('describe', '')} {r.get('detail', '')}".lower()
        score = 0

        # Ki·ªÉm tra product_type
        if intent.get("product_type") and intent["product_type"] in text:
            score += 1

        # Ki·ªÉm tra material
        if intent.get("material"):
            material = intent["material"]
            if isinstance(material, str) and material in text:
                score += 1
            elif isinstance(material, list) and any(m in text for m in material):
                score += 1

        # ‚úÖ X·ª≠ l√Ω features nested list
        features = intent.get("features")
        if not isinstance(features, list):
            features = []

        flattened_features = []
        for f in features:
            if isinstance(f, list):
                flattened_features.extend(f)
            elif isinstance(f, str):
                flattened_features.append(f)
        if any(f.lower() in text for f in flattened_features):
            score += 1

        # Ki·ªÉm tra gi√°
        try:
            if intent.get("price_max") and float(r.get("price", 9999999)) <= intent["price_max"]:
                score += 1
        except:
            pass

        r["score"] = score
        ranked.append(r)

    ranked.sort(key=lambda x: x.get("score", 0), reverse=True)
    state["results"] = ranked[:10]
    print(f"[‚è± rerank_node] took {time.time() - start:.2f}s")
    return state



def generate_prompt_context(results, product_type):
    keywords = config.PRODUCT_KEYWORDS.get(product_type, config.DEFAULT_KEYWORDS)
    context_lines = []

    for idx, r in enumerate(results):
        product_name = r.get("name_product", f"S·∫£n ph·∫©m {idx+1}")
        comment_text = r.get("comment", "") or r.get("describe", "") or r.get("detail", "") or ""
        if not comment_text.strip():
            continue

        added = False
        for kw in keywords:
            if kw in comment_text.lower():
                context_lines.append(
                    f"T√™n: {product_name}\nB√¨nh lu·∫≠n: {comment_text.strip()}\n"
                )
                added = True
                break
        # Fallback: n·∫øu kh√¥ng kh·ªõp t·ª´ kh√≥a m√† index nh·ªè ‚Üí v·∫´n l·∫•y
        if not added and idx < 3:
            context_lines.append(
                f"T√™n: {product_name}\nB√¨nh lu·∫≠n: {comment_text.strip()}\n"
            )

    return "\n".join(context_lines)

def contains_partial_keywords(product_type: str, text: str) -> bool:
    if not product_type or not text:
        return False
    return all(word in text.lower() for word in product_type.lower().split())

def base_prompt(task: str, context: str, query: str):
    if not context.strip():
        return None
    return f"""
B·∫°n l√† tr·ª£ l√Ω AI t∆∞ v·∫•n s·∫£n ph·∫©m. Tr·∫£ l·ªùi ho√†n to√†n b·∫±ng ti·∫øng Vi·ªát.

Ng∆∞·ªùi d√πng h·ªèi: \"{query}\"

D∆∞·ªõi ƒë√¢y l√† c√°c b√¨nh lu·∫≠n th·∫≠t:
{context}

Nhi·ªám v·ª•:
{task}
"""


def find_by_name_node(state: AgentState) -> AgentState:
    start = time.time()  # Ghi l·∫°i th·ªùi gian b·∫Øt ƒë·∫ßu ƒë·ªÉ ƒëo hi·ªáu su·∫•t

    # L·∫•y intent t·ª´ state (n·ªôi dung y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng)
    intent = state.get("user_intent") or {}

    # L·∫•y t√™n s·∫£n ph·∫©m c·∫ßn t√¨m (product_name), chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng v√† lo·∫°i b·ªè kho·∫£ng tr·∫Øng
    product_name = (intent.get("product_name") or "").lower().strip()
    # L·∫•y lo·∫°i s·∫£n ph·∫©m (n·∫øu c√≥), c≈©ng chu·∫©n h√≥a t∆∞∆°ng t·ª±
    product_type = (intent.get("product_type") or "").lower().strip()

    # N·∫øu kh√¥ng c√≥ t√™n s·∫£n ph·∫©m th√¨ ph·∫£n h·ªìi y√™u c·∫ßu nh·∫≠p l·∫°i
    if not product_name:
        state["recommendations"] = "Vui l√≤ng cung c·∫•p t√™n s·∫£n ph·∫©m c·ª• th·ªÉ ƒë·ªÉ t√¨m ki·∫øm."
        state["chat_history"].append(f"H·ªá th·ªëng: {state['recommendations']}")
        print(f"[‚è± find_by_name_node] took {time.time() - start:.2f}s")
        return state

    # K·∫øt n·ªëi t·ªõi Qdrant ƒë·ªÉ truy xu·∫•t d·ªØ li·ªáu
    client = get_qdrant_client()

    # Duy·ªát to√†n b·ªô 1000 s·∫£n ph·∫©m t·ª´ collection ƒë·ªÉ t√¨m s·∫£n ph·∫©m tr√πng t√™n
    all_records, _ = client.scroll(
        collection_name=config.COLLECTION_NAME,
        limit=1000,  # TƒÉng c∆° h·ªôi t√¨m th·∫•y s·∫£n ph·∫©m
        with_payload=True
    )

    matches = []  # Danh s√°ch s·∫£n ph·∫©m tr√πng kh·ªõp

    for r in all_records:
        # L·∫•y t√™n s·∫£n ph·∫©m trong DB v√† chu·∫©n h√≥a
        name_in_db = (r.payload.get("name_product") or "").lower().strip()

        # N·∫øu t√™n ch·ª©a product_name ho·∫∑c ƒë·ªô t∆∞∆°ng ƒë·ªìng cao th√¨ th√™m v√†o k·∫øt qu·∫£
        if (product_name in name_in_db or fuzz.partial_ratio(product_name, name_in_db) > 85):
            matches.append(r.payload)

    # N·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o kh·ªõp
    if not matches:
        state["recommendations"] = f"T√¥i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m '{product_name}' trong c√°c k·∫øt qu·∫£ li√™n quan."
        state["chat_history"].append(f"H·ªá th·ªëng: {state['recommendations']}")
        print(f"[‚è± find_by_name_node] took {time.time() - start:.2f}s")
        return state

    # S·∫Øp x·∫øp danh s√°ch kh·ªõp theo m·ª©c ƒë·ªô t∆∞∆°ng ƒë·ªìng (cao ‚Üí th·∫•p)
    matches.sort(
        key=lambda x: fuzz.ratio(product_name, x.get("name_product", "").lower()),
        reverse=True
    )

    # L·∫•y s·∫£n ph·∫©m ph√π h·ª£p nh·∫•t
    top_product = matches[0]

    # T·∫°o context ƒë·ªÉ g·ª≠i v√†o prompt cho LLM
    context = f"T√™n: {top_product.get('name_product', 'S·∫£n ph·∫©m')}\nB√¨nh lu·∫≠n: {top_product.get('comment', '') or top_product.get('describe', '') or top_product.get('detail', '')}"

    # T·∫°o prompt v·ªõi y√™u c·∫ßu r√µ r√†ng: kh√¥ng b·ªãa, ch·ªâ d√πng d·ªØ li·ªáu hi·ªán c√≥
    prompt = base_prompt(
        task="""\
- X√°c nh·∫≠n c√≥ s·∫£n ph·∫©m theo y√™u c·∫ßu.
- Cung c·∫•p th√¥ng tin chi ti·∫øt (t√™n, gi√°, b√¨nh lu·∫≠n n·∫øu c√≥).
- Kh√¥ng th√™m th√¥ng tin ngo√†i d·ªØ li·ªáu.
""",
        context=context,
        query=state["query"]
    )

    # N·∫øu kh√¥ng t·∫°o ƒë∆∞·ª£c prompt (c√≥ th·ªÉ thi·∫øu th√¥ng tin)
    if not prompt:
        state["recommendations"] = f"T√¨m th·∫•y s·∫£n ph·∫©m '{product_name}', nh∆∞ng kh√¥ng c√≥ th√¥ng tin chi ti·∫øt."
    else:
        # G·ªçi LLM ƒë·ªÉ sinh c√¢u tr·∫£ l·ªùi d·ª±a tr√™n prompt
        llm = get_llm()
        response = llm.invoke(prompt)
        state["recommendations"] = response.content.strip()  # L·∫•y n·ªôi dung tr·∫£ l·ªùi

        # L·∫•y c√°c th√¥ng tin b·ªï sung t·ª´ s·∫£n ph·∫©m
        name = top_product.get("name_product", "S·∫£n ph·∫©m")
        link = top_product.get("link_product")
        price = top_product.get("price")
        image_url = top_product.get("link_image")

        # X·ª≠ l√Ω ƒë·ªãnh d·∫°ng gi√°
        try:
            price_display = f"{float(price):,.0f}ƒë" if price else "Kh√¥ng r√µ"
        except:
            price_display = str(price) or "Kh√¥ng r√µ"

        # T·∫°o ph·∫ßn hi·ªÉn th·ªã chi ti·∫øt
        details_string = "\n\nüîó **Link s·∫£n ph·∫©m:**"
        details_string += f"\n- [{name}]({link}) ‚Äî üí∞ {price_display}" if link else f"\n- {name} ‚Äî üí∞ {price_display}"

        # N·∫øu c√≥ h√¨nh ·∫£nh th√¨ th√™m ƒë∆∞·ªùng link xem ·∫£nh
        if image_url:
            details_string += f"\n  H√¨nh ·∫£nh: [Xem ·∫£nh]({image_url})"

        # Gh√©p ph·∫ßn chi ti·∫øt v√†o k·∫øt qu·∫£ tr·∫£ l·ªùi
        state["recommendations"] += details_string

        # C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p g·∫ßn ƒë√¢y (gi·ªØ 2 s·∫£n ph·∫©m cu·ªëi c√πng)
        last_recs = state.get("last_recommended_products", [])
        new_recs = (last_recs + [top_product])[-2:]
        state["last_recommended_products"] = new_recs

    # L∆∞u l·∫°i c√¢u tr·∫£ l·ªùi v√†o l·ªãch s·ª≠ h·ªôi tho·∫°i
    state["chat_history"].append(f"H·ªá th·ªëng: {state['recommendations']}")
    print(f"[‚è± find_by_name_node] took {time.time() - start:.2f}s")
    return state


   
def recommend_node(state: AgentState) -> AgentState:
    """Node x·ª≠ l√Ω y√™u c·∫ßu 'g·ª£i √Ω s·∫£n ph·∫©m'."""

    start = time.time()  # B·∫Øt ƒë·∫ßu ƒë·∫øm th·ªùi gian ƒë·ªÉ log th·ªùi gian th·ª±c thi

    # Tr√≠ch xu·∫•t th√¥ng tin t·ª´ intent
    intent = state.get("user_intent") or {}
    num_products = intent.get("num_products", 2)  # S·ªë l∆∞·ª£ng s·∫£n ph·∫©m mu·ªën g·ª£i √Ω
    product_type = (intent.get("product_type") or "").lower()  # Lo·∫°i s·∫£n ph·∫©m

    # L·ªçc danh s√°ch s·∫£n ph·∫©m ph√π h·ª£p t·ª´ `state["results"]`
    filtered = [
        r for r in state["results"]
        if fuzzy_match(
            product_type,
            f"{r.get('name_product', '')} {r.get('describe', '') or ''} {r.get('detail', '') or ''}"
        )
    ]

    # N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m ph√π h·ª£p
    if not filtered:
        state["recommendations"] = (
            f"Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi '{product_type}'. "
            "Vui l√≤ng ki·ªÉm tra l·∫°i t·ª´ kh√≥a ho·∫∑c th√™m th√¥ng tin chi ti·∫øt h∆°n."
        )
        state["chat_history"].append(f"H·ªá th·ªëng: {state['recommendations']}")
        print(f"[‚è± recommend_node] took {time.time() - start:.2f}s")
        return state

    # X√°c ƒë·ªãnh n·∫øu c√≥ y√™u c·∫ßu s·∫Øp x·∫øp theo gi√°
    features = intent.get("features") or []
    sort_by_price = None
    if "gi√° r·∫ª nh·∫•t" in [f.lower() for f in features]:
        sort_by_price = "asc"
    elif "gi√° cao nh·∫•t" in [f.lower() for f in features]:
        sort_by_price = "desc"

    # S·∫Øp x·∫øp theo gi√° n·∫øu c√≥ y√™u c·∫ßu
    if sort_by_price:
        def safe_price(p):
            try:
                return float(p.get("price", 9999999 if sort_by_price == "asc" else 0))
            except:
                return 9999999 if sort_by_price == "asc" else 0

        sorted_products = sorted(filtered, key=safe_price, reverse=(sort_by_price == "desc"))
    else:
        sorted_products = filtered  # Kh√¥ng c·∫ßn s·∫Øp x·∫øp, gi·ªØ nguy√™n th·ª© t·ª±

    # Lo·∫°i b·ªè s·∫£n ph·∫©m tr√πng t√™n
    unique_products = []
    seen_names = set()
    for p in sorted_products:
        name = (p.get("name_product") or "").strip().lower()
        if name and name not in seen_names:
            p["__type"] = product_type  # G√°n lo·∫°i s·∫£n ph·∫©m v√†o ƒë·ªÉ s·ª≠ d·ª•ng v·ªÅ sau
            unique_products.append(p)
            seen_names.add(name)

    # Ch·ªçn ra s·ªë l∆∞·ª£ng s·∫£n ph·∫©m c·∫ßn g·ª£i √Ω
    top_products = unique_products[:num_products]
    if not top_products:
        state["recommendations"] = "Kh√¥ng c√≥ s·∫£n ph·∫©m ƒë·ªß th√¥ng tin ƒë·ªÉ t∆∞ v·∫•n."
        state["chat_history"].append(f"H·ªá th·ªëng: {state['recommendations']}")
        print(f"[‚è± recommend_node] took {time.time() - start:.2f}s")
        return state

    # L∆∞u l·∫°i danh s√°ch s·∫£n ph·∫©m ƒë∆∞·ª£c g·ª£i √Ω ƒë·ªÉ c√≥ th·ªÉ so s√°nh sau
    state["last_recommended_products"] = top_products

    # T·∫°o context ch·ª©a c√°c s·∫£n ph·∫©m ƒë·ªÉ ƒë∆∞a v√†o prompt
    context = generate_prompt_context(top_products, product_type)

    # T·∫°o prompt y√™u c·∫ßu LLM vi·∫øt t∆∞ v·∫•n
    prompt = base_prompt(
        task="""\
- Tr·∫£ l·ªùi ho√†n to√†n b·∫±ng ti·∫øng Vi·ªát.
- T√≥m t·∫Øt c·∫£m nh·∫≠n chung c·ªßa kh√°ch h√†ng v·ªÅ s·∫£n ph·∫©m (bao g·ªìm c·∫£ gi√° n·∫øu c√≥).
- G·ª£i √Ω c√°c s·∫£n ph·∫©m ph√π h·ª£p t·ª´ danh s√°ch tr√™n (ƒë√∫ng s·ªë l∆∞·ª£ng y√™u c·∫ßu).
- N√™u r√µ ∆∞u nh∆∞·ª£c ƒëi·ªÉm.
- Kh√¥ng c·∫ßn so s√°nh.
- Kh√¥ng b·ªãa t√™n hay th√™m th√¥ng tin ngo√†i d·ªØ li·ªáu.
""",
        context=context,
        query=state["query"]
    )

    # N·∫øu kh√¥ng t·∫°o ƒë∆∞·ª£c prompt, tr·∫£ l·ªùi l·ªói
    if not prompt:
        state["recommendations"] = "Xin l·ªói, kh√¥ng ƒë·ªß th√¥ng tin ƒë·ªÉ t∆∞ v·∫•n."
        state["chat_history"].append(f"H·ªá th·ªëng: {state['recommendations']}")
        print(f"[‚è± recommend_node] took {time.time() - start:.2f}s")
        return state

    # G·ªçi LLM ƒë·ªÉ sinh n·ªôi dung t∆∞ v·∫•n
    llm = get_llm()
    response = llm.invoke(prompt)
    reply = response.content.strip()

    # Th√™m link v√† gi√° v√†o ph·∫ßn tr·∫£ l·ªùi
    reply += "\n\nüîó **Link s·∫£n ph·∫©m:**"
    for product in top_products:
        name = product.get("name_product", "S·∫£n ph·∫©m").strip()
        link = product.get("link_product", "").strip()
        price = product.get("price")
        image_url = product.get("link_image", "").strip()

        # Format gi√°
        try:
            price_display = f"{float(price):,.0f}ƒë" if price else "Kh√¥ng r√µ"
        except:
            price_display = str(price) or "Kh√¥ng r√µ"

        reply += f"\n- [{name}]({link}) ‚Äî üí∞ {price_display}"
        # N·∫øu mu·ªën hi·ªÉn th·ªã h√¨nh ·∫£nh:
        # if image_url:
        #     reply += f"\n  H√¨nh ·∫£nh: [Xem ·∫£nh]({image_url})"

    # Ghi v√†o state k·∫øt qu·∫£ cu·ªëi c√πng
    state["recommendations"] = reply
    state["chat_history"].append(f"H·ªá th·ªëng: {reply}")
    print(f"[‚è± recommend_node] took {time.time() - start:.2f}s")
    return state



def keyword_in_text(keyword: str, text: str) -> bool:
    words = keyword.lower().split()
    return all(w in text.lower() for w in words)
def fuzzy_match(product_type: str, text: str) -> bool:
    if not product_type or not text:
        return False
    words = product_type.lower().split()
    matched = sum(1 for w in words if w in text.lower())
    return matched >= len(words) - 1  # cho ph√©p sai 1 t·ª´


def compare_node(state: AgentState) -> AgentState:
    start = time.time()  # Ghi l·∫°i th·ªùi gian b·∫Øt ƒë·∫ßu x·ª≠ l√Ω

    # L·∫•y th√¥ng tin t·ª´ intent
    intent = state.get("user_intent") or {}
    num_products = intent.get("num_products", 2)  # S·ªë l∆∞·ª£ng s·∫£n ph·∫©m c·∫ßn so s√°nh (th∆∞·ªùng l√† 2)

    # L·∫•y lo·∫°i s·∫£n ph·∫©m (n·∫øu c√≥)
    product_type = (intent.get("product_type") or "").lower()

    # L·∫•y danh s√°ch s·∫£n ph·∫©m g·∫ßn ƒë√¢y ƒë√£ ƒë∆∞·ª£c g·ª£i √Ω ho·∫∑c t√¨m ra
    previous = state.get("last_recommended_products") or []

    
    top_results = previous  # D√πng to√†n b·ªô danh s√°ch ƒë·ªÉ so s√°nh
    # =========================================================

    # N·∫øu kh√¥ng c√≥ ƒë·ªß 2 s·∫£n ph·∫©m, t·ª´ ch·ªëi so s√°nh
    if len(top_results) < 2:
        state["recommendations"] = (
            "Kh√¥ng ƒë·ªß s·∫£n ph·∫©m ƒë·ªÉ so s√°nh. Vui l√≤ng y√™u c·∫ßu g·ª£i √Ω ho·∫∑c t√¨m √≠t nh·∫•t 2 s·∫£n ph·∫©m tr∆∞·ªõc."
        )
        state["chat_history"].append(f"H·ªá th·ªëng: {state['recommendations']}")
        print(f"[‚è± compare_node] took {time.time() - start:.2f}s")
        return state

    if not product_type and top_results:
        pass  # Gi·ªØ ƒë∆°n gi·∫£n, kh√¥ng c·∫ßn suy ra

    # T·∫°o context ch·ª©a th√¥ng tin c√°c s·∫£n ph·∫©m c·∫ßn so s√°nh
    context = generate_prompt_context(top_results, product_type)

    # T·∫°o prompt g·ª≠i t·ªõi LLM ƒë·ªÉ y√™u c·∫ßu vi·∫øt so s√°nh
    prompt = base_prompt(
        task="""\
- So s√°nh c√°c s·∫£n ph·∫©m ƒë∆∞·ª£c cung c·∫•p trong ph·∫ßn B√¨nh lu·∫≠n b√™n d∆∞·ªõi.
- G·ªçi t√™n s·∫£n ph·∫©m ƒë√∫ng theo ph·∫ßn "T√™n: ...".
- Ph√¢n t√≠ch ∆∞u nh∆∞·ª£c ƒëi·ªÉm c·ªßa t·ª´ng s·∫£n ph·∫©m m·ªôt c√°ch r√µ r√†ng.
- ƒê∆∞a ra k·∫øt lu·∫≠n n√™n ch·ªçn s·∫£n ph·∫©m n√†o cho nhu c·∫ßu n√†o.
- Kh√¥ng b·ªãa t√™n hay th√™m d·ªØ ki·ªán kh√¥ng c√≥.
""",
        context=context,
        query=state["query"]
    )

    # N·∫øu kh√¥ng t·∫°o ƒë∆∞·ª£c prompt (thi·∫øu d·ªØ li·ªáu)
    if not prompt:
        state["recommendations"] = "Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ so s√°nh."
        state["chat_history"].append(f"H·ªá th·ªëng: {state['recommendations']}")
        print(f"[‚è± compare_node] took {time.time() - start:.2f}s")
        return state

    # G·ªçi LLM ƒë·ªÉ sinh n·ªôi dung so s√°nh
    llm = get_llm()
    response = llm.invoke(prompt)
    reply = response.content.strip()  # N·ªôi dung ph·∫£n h·ªìi

    # Th√™m ph·∫ßn danh s√°ch link s·∫£n ph·∫©m ƒë∆∞·ª£c so s√°nh
    reply += "\n\nüîó **Link c√°c s·∫£n ph·∫©m ƒë∆∞·ª£c so s√°nh:**"
    for product in top_results:
        name = product.get("name_product", "S·∫£n ph·∫©m").strip()
        link = product.get("link_product", "").strip()
        price = product.get("price")
        image_url = product.get("link_image", "").strip()

        # Hi·ªÉn th·ªã gi√°
        try:
            price_display = f"{float(price):,.0f}ƒë" if price else "Kh√¥ng r√µ"
        except:
            price_display = str(price) or "Kh√¥ng r√µ"

        reply += f"\n- [{name}]({link}) ‚Äî üí∞ {price_display}"
        # N·∫øu c·∫ßn hi·ªÉn th·ªã ·∫£nh:
        # if image_url:
        #     reply += f"\n  H√¨nh ·∫£nh: [Xem ·∫£nh]({image_url})"

    # L∆∞u k·∫øt qu·∫£ v√†o state
    state["recommendations"] = reply
    state["chat_history"].append(f"H·ªá th·ªëng: {reply}")
    print(f"[‚è± compare_node] took {time.time() - start:.2f}s")
    return state



def summary_node(state: AgentState) -> AgentState:
    # L·∫•y intent t·ª´ ng∆∞·ªùi d√πng
    intent = state.get("user_intent", {})

    # L·∫•y danh s√°ch k·∫øt qu·∫£ s·∫£n ph·∫©m ƒë√£ t√¨m ƒë∆∞·ª£c
    results = state.get("results", [])

    # L·∫•y lo·∫°i s·∫£n ph·∫©m v√† t√™n s·∫£n ph·∫©m c·ª• th·ªÉ n·∫øu c√≥
    product_type = intent.get("product_type", "")
    product_name_query = intent.get("product_name")

    # --- B∆∞·ªõc 1: T·∫°o b·∫£n t√≥m t·∫Øt b·∫±ng AI t·ª´ comment ---
    # D·ª±a tr√™n danh s√°ch k·∫øt qu·∫£ v√† lo·∫°i s·∫£n ph·∫©m ƒë√£ c√≥
    context = generate_prompt_context(results, product_type)

    # T·∫°o prompt y√™u c·∫ßu AI t√≥m t·∫Øt c·∫£m nh·∫≠n kh√°ch h√†ng
    prompt = base_prompt("""\
- T√≥m t·∫Øt c·∫£m nh·∫≠n ng∆∞·ªùi d√πng.
- Ch·ªâ s·ª≠ d·ª•ng th√¥ng tin c√≥ trong comment.
- Gi·ªØ gi·ªçng vƒÉn t·ª± nhi√™n, kh√°ch quan.
- Kh√¥ng b·ªãa t√™n hay th√™m d·ªØ ki·ªán kh√¥ng c√≥.
""", context, state["query"])

    # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t·∫°o prompt th√¨ tr·∫£ v·ªÅ lu√¥n
    if not prompt:
        state["recommendations"] = "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªß r√µ ƒë·ªÉ t√≥m t·∫Øt."
        return state

    # G·ªçi LLM ƒë·ªÉ t·∫°o b·∫£n t√≥m t·∫Øt
    llm = get_llm()
    response = llm.invoke(prompt)
    summary_text = response.content.strip()

    top_product = None
    if product_name_query and results:
        best_match = max(
            results, 
            key=lambda r: fuzz.ratio(product_name_query.lower(), r.get("name_product", "").lower()),
            default=None
        )

        # N·∫øu ƒë·ªô t∆∞∆°ng ƒë·ªìng ƒë·ªß cao th√¨ ch·∫•p nh·∫≠n s·∫£n ph·∫©m ƒë√≥
        if best_match and fuzz.ratio(product_name_query.lower(), best_match.get("name_product", "").lower()) > 75:
            top_product = best_match

            # Tr√≠ch xu·∫•t c√°c th√¥ng tin chi ti·∫øt
            name = top_product.get("name_product", "S·∫£n ph·∫©m")
            link = top_product.get("link_product")
            price = top_product.get("price")
            image_url = top_product.get("link_image")

            # Format gi√° ƒë·ªÉ hi·ªÉn th·ªã
            try:
                price_display = f"{float(price):,.0f}ƒë" if price else "Kh√¥ng r√µ"
            except (ValueError, TypeError):
                price_display = str(price) or "Kh√¥ng r√µ"

            # Gh√©p th√¥ng tin chi ti·∫øt th√†nh chu·ªói
            details_string = f"\n\nüîó **Th√¥ng tin s·∫£n ph·∫©m:**"
            details_string += f"\n- [{name}]({link}) ‚Äî üí∞ {price_display}" if link else f"\n- {name} ‚Äî üí∞ {price_display}"
            if image_url:
                details_string += f"\n  H√¨nh ·∫£nh: [Xem ·∫£nh]({image_url})"

            # G·∫Øn ph·∫ßn chi ti·∫øt v√†o b·∫£n t√≥m t·∫Øt
            summary_text += details_string

            # --- B∆∞·ªõc 3: C·∫≠p nh·∫≠t "tr√≠ nh·ªõ" ƒë·ªÉ c√≥ th·ªÉ so s√°nh sau ---
            last_recs = state.get("last_recommended_products", [])
            new_recs = (last_recs + [top_product])[-2:]  # Gi·ªØ t·ªëi ƒëa 2 s·∫£n ph·∫©m g·∫ßn nh·∫•t
            state["last_recommended_products"] = new_recs

    # --- B∆∞·ªõc 4: Ghi k·∫øt qu·∫£ v√†o state ---
    state["recommendations"] = summary_text
    state["chat_history"].append(f"H·ªá th·ªëng: {summary_text}")
    
    return state


